#JSGF V1.0;

grammar edu.cmu.sphinx.demo.jsapi.math.math_New;

/***** NUMBERS AND VARIABLES *******/
<0to9> = one {this.$value = "1"}
	| two {this.$value = "2"}
	| three {this.$value = "3"}
	| four {this.$value = "4"}
	| five {this.$value = "5"}
	| six {this.$value = "6"}
	| seven {this.$value = "7"}
	| eight {this.$value = "8"}
	| nine {this.$value = "9"}
	| zero {this.$value = "0"};

<10to19> = Ten {this.$value = "10"}
	| eleven {this.$value = "11"}
	| twelve {this.$value = "12"}
	| thirteen {this.$value = "13"}
	| fourteen {this.$value = "14"}
	| fifteen {this.$value = "15"}
	| sixteen {this.$value = "16"}
	| seventeen {this.$value = "17"}
	| eighteen {this.$value = "18"}
	| nineteen {this.$value = "19"};
<tens> = twenty {this.$value = "2"}
	| thirty {this.$value = "3"}
	| forty {this.$value = "4"}
	| fifty {this.$value = "5"}
	| sixty {this.$value = "6"}
	| seventy {this.$value = "7"}
	| eighty {this.$value = "8"}
	| ninety {this.$value = "9"};
<20to99> = <tens> {this.$value = $tens.$value + "0"}
	| <tens><0to9> {this.$value = $tens.$value + $0to9.$value};

<number> = <0to9> {this.$value = $0to9.$value}| <10to19> {this.$value = $10to19.$value}| <20to99>{this.$value = $20to99.$value};
<variable> = a | b | c | d | f | x | y | z;
<nv> = ((<number>|<variable>){this.$value = $.$value}
	|<number><variable>{this.$value = $.$value});

/********* END OF NUMBERS & VARIABLES ************************/
/*************************************************************/
/********* SIMPLE OPERATIONS *********************************/

<plus> = plus {this.$value = "+"};
<division> = over | divided by;
<operation> =  minus {this.$value = "-"} | times {this.$value = "*"}|plus {this.$value = "+"};
<inverse_square_cube> = inverse{this.$value = "^\{-1\}"} |squared {this.$value = "^2"}| cubed {this.$value = "^3"};
<power> = (to the| to the power) {this.$value = "^"};
/********** END OF SIMPLE OPERATIONS ************************/
/************************************************************/
/********** SIMPLE TERMS ************************************/
/** SQRT **/
<root> = (square root
	|radical
	|root){this.$value = "%sqrt\{\}"}[of];
<rootTerm> = <root><simpleTerm>{this.$value = "%sqrt\{" + $.$value + "\}"};
/** END SQRT **/
/** FUNCTIONS **/
<variableOf> = <variable> of {this.$value = $variable.$value + "()"};
<functions> = <variable> of <simpleTerm>{this.$value = $variable + "(" + $simpleTerm.$value + ")"};
/** End **/
//REDO ACCORDING TO ORDER OF OPERATION
<divTerm> = <nv>{this.nv1 = $.$value}<division><nv>{this.$value = "%frac\{" + this.nv1 + "\}\{" + $.$value + "\}"}
		|<nv>{this.nv1 = $.$value}<division><simpleTerm>{this.$value = "%frac\{" + this.nv1 + "\}\{" + $.$value + "\}"};

<powerTerm> = <nv>{this.$value = $.$value}<power>{this.$value = this.$value + $.$value}<simpleTerm>
		{this.$value = this.$value + "\{"+ $.$value + "\}"};

<simpleTerm> = (<divTerm>|<powerTerm>|<nv>|<rootTerm>|<functions>){this.$value = $.$value;}
		|<nv>{this.$value = $.$value;}<operation>{this.$value = this.$value + $.$value;}
		<nv>{this.$value = this.$value + $.$value;};
	
	//number
<term> = [of{appObj.ofSkip()}]((<simpleTerm> {this.$value = $.$value}//the of is added in case the term comes after an integral or summation or sth
	//[number] plus [number] -- an operation can be said on its own
	|(<plus>|<operation>){this.$value = $.$value} (<simpleTerm>){this.$value = this.$value + $.$value})((<plus>|<operation>){this.$value 
	=this.$value + $.$value} (<simpleTerm>){this.$value = this.$value + $.$value})*
	|(<simpleTerm>){this.$value = $.$value}((<plus>|<operation>){this.$value = this.$value + $.$value} (<simpleTerm>){this.$value = this.
	$value + $.$value})+
	//If nothing is said after times, minus, to the power, the program brackets the next term	
	|((<simpleTerm>){this.$value = $.$value} <operation>{this.$value = this.$value + $.$value})+
	|(<operation>|<plus>){this.$value = $.$value} ((<simpleTerm>){this.$value = this.$value + $.$value}(<operation>|<plus>){this.$value = 
	this.$value + $.$value})+);
//NOTE: A OVER
//divide already written term with a term
<dividePrev> = <division><term>{appObj.handleDivision($term.$value);};
//raise to the power already written term with a power
<raiseToThePower> = <power><term>{appObj.handlePower($term.$value);};
/********** END SIMPLE TERMS ********************************/
/** INTEGRAL **///CAREFUL FOR SPACE DIRECTLY FOLLOWING THE INTEGRAL
<boundedIntegral> = bounded integral{this.$value = "%int_\{\}^\{\}"}{appObj.boundedIntegral(this.$value);};
<integralOf> = (integral [of]){this.$value = "%int "};
<simpleIntegralTerm> = integral{this.$value = "%int"} <Bounds>{this.$value = this.$value + $.$value}[of];
<integralTerm> = (<integralOf>|<simpleIntegralTerm>){this.$value = $.$value} <term> {this.$value = this.$value + $.$value}
			[d <term>{this.$value = this.$value + "d" + $.$value}];
/** SUMMATION **/
<boundedSum> = bounded (sum|summation){this.$value = "%displaystyle%sum%limits_\{\}^\{\}"}{appObj.boundedIntegral(this.$value);};
<sumOf> = ((sum|summation) [of]){this.$value = "%displaystyle%sum%limits "};
<simpleSumTerm> = (sum|summation){this.$value = "%displaystyle%sum%limits"} <Bounds>{this.$value = this.$value + $.$value}[of];
<sumTerm> = (<sumOf>|<simpleIntegralTerm>){this.$value = $.$value} <term> {this.$value = this.$value + $.$value};

/** BOUNDS **/
<Bounds> = from <term>{appObj.from($.$value);}[to <term> 
		{appObj.to($.$value);}]
		|to <term> {appObj.to($.$value);};

<from> = from {appObj.from("");};
//<fromTerm> = from term{appObj.from("");};
<to> = to {appObj.to("");};
//<toTerm> = to term{appObj.to("");};
/**************/
/** BRACKETS **/
<openBracket> = (open | open bracket){this.$value = "("}{appObj.addAtCursor(this.$value);}| open brackets {appObj.addBrackets();};
<closebracket> = (close| close bracket){this.$value = ")"}{appObj.addAtCursor(this.$value);}| close everything{appObj.closeEverything();};
<brackets> = <openBracket>|<closebracket>;
/** END BRACKETS **/
<return> = go back|undo;
<testing> = hello;
<done> = (done|skip){appObj.skip();}|of{appObj.ofSkip()};

public <equation> = (<term>{appObj.addAtCursor($.$value);}
	|<operation>{appObj.addAtCursor($.$value)}
	|(<dividePrev>|<division>{appObj.handleDivision("");})
	|[<operation>{appObj.addAtCursor($.$value)}](<root>|<variableOf>){appObj.addRoot($.$value);}	
	|<done>
	|<brackets>
	|<raiseToThePower>|<power>{appObj.handlePower("");}
	|<boundedIntegral>
	|[<operation>{appObj.addAtCursor($.$value)}](<simpleIntegralTerm>{appObj.addAtCursor($.$value);}
	|(<integralTerm>|<integralOf>){appObj.addAtCursor($.$value);})
	|[<operation>{appObj.addAtCursor($.$value)}](<simpleSumTerm>{appObj.addAtCursor($.$value);}
	|(<sumTerm>|<sumOf>){appObj.addAtCursor($.$value);})
	|<from>
	|<to>
	|<Bounds>){appObj.setAddUtterance(true);}
	|<return>{appObj.undo(1);}
	|<testing>;
